generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  url           String?
  accounts      Account[]
  comments      Comment[]
  posts         Post[]
}

model Post {
  id        String    @id @unique @default(cuid())
  isActive  Boolean   @default(true)
  title     String
  content   String
  order     Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  authorId  String
  thumbnail String?
  summary   String
  tags      String[]
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id])

  @@index([isActive, title, tags])
}

model Comment {
  id        String    @id @default(cuid())
  isActive  Boolean   @default(true)
  content   String
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  authorId  String
  parentId  String?
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  children  Comment[] @relation("ChildComments")
  post      Post      @relation(fields: [postId], references: [id])
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  token_type        String?
  expires_at        Int?
  refresh_token     String?
  scope             String?
  id_token          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
